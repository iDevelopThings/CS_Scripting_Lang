// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: VoltumLexer.flex

package com.voltum.voltumscript;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.voltum.voltumscript.parser.VoltumTokenTypes;

import static com.voltum.voltumscript.psi.VoltumTypes.*;
import static com.intellij.psi.TokenType.*;


public class VoltumLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_BLOCK_COMMENT = 2;
  public static final int IN_OUTER_EOL_COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\2\u1f00\1\u2200\1\u2300"+
    "\2\u1f00\31\u0100\1\u2400\121\u0100\1\u2500\4\u0100\1\u2600\1\u0100"+
    "\1\u2700\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00"+
    "\10\u2e00\31\u1f00\1\u0100\1\u2f00\1\u3000\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00\1\u0100"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u1f00"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000"+
    "\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00\4\u0100\1\u5400"+
    "\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600\1\u5700\2\u1f00"+
    "\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00\45\u1f00\1\u0100"+
    "\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00\1\u6000\1\u1f00"+
    "\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500\5\u1f00\1\u6600"+
    "\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00\1\u6b00\21\u1f00"+
    "\246\u0100\1\u6c00\20\u0100\1\u6d00\1\u6e00\25\u0100\1\u6f00\34\u0100"+
    "\1\u7000\14\u1f00\2\u0100\1\u7100\u0b06\u1f00\1\u7200\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\2\0\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\2\22\1\23\1\24"+
    "\1\25\1\22\1\26\3\22\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\0\1\35\3\36\1\37\6\36\1\40"+
    "\1\36\1\41\1\42\5\36\1\43\5\36\1\44\1\45"+
    "\1\46\1\47\1\36\1\0\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\36\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\36\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\36\1\75\1\36\1\76\1\77"+
    "\1\100\1\101\6\0\1\3\44\0\1\36\12\0\1\36"+
    "\1\0\1\102\2\0\1\36\5\0\27\36\1\0\37\36"+
    "\1\0\u01ca\36\4\0\14\36\16\0\5\36\7\0\1\36"+
    "\1\0\1\36\21\0\160\102\5\36\1\0\2\36\3\0"+
    "\3\36\1\0\1\36\6\0\1\36\1\102\3\36\1\0"+
    "\1\36\1\0\24\36\1\0\123\36\1\0\213\36\1\0"+
    "\5\102\2\0\246\36\1\0\46\36\2\0\1\36\6\0"+
    "\51\36\10\0\55\102\1\0\1\102\1\0\2\102\1\0"+
    "\2\102\1\0\1\102\10\0\33\36\4\0\4\36\35\0"+
    "\13\102\5\0\53\36\37\102\4\0\2\36\1\102\143\36"+
    "\1\0\1\36\7\102\2\0\6\102\2\36\2\102\1\0"+
    "\4\102\2\36\12\102\3\36\2\0\1\36\20\0\1\36"+
    "\1\102\36\36\33\102\2\0\131\36\13\102\1\36\16\0"+
    "\12\102\41\36\11\102\2\36\4\0\1\36\2\0\1\102"+
    "\2\0\26\36\4\102\1\36\11\102\1\36\3\102\1\36"+
    "\5\102\22\0\31\36\3\102\4\0\13\36\65\0\25\36"+
    "\1\0\10\36\25\0\17\102\1\0\41\102\66\36\3\102"+
    "\1\36\22\102\1\36\7\102\12\36\2\102\2\0\12\102"+
    "\1\0\20\36\3\102\1\0\10\36\2\0\2\36\2\0"+
    "\26\36\1\0\7\36\1\0\1\36\3\0\4\36\2\0"+
    "\1\102\1\36\7\102\2\0\2\102\2\0\3\102\1\36"+
    "\10\0\1\102\4\0\2\36\1\0\3\36\2\102\2\0"+
    "\12\102\2\36\12\0\1\36\1\0\1\102\2\0\3\102"+
    "\1\0\6\36\4\0\2\36\2\0\26\36\1\0\7\36"+
    "\1\0\2\36\1\0\2\36\1\0\2\36\2\0\1\102"+
    "\1\0\5\102\4\0\2\102\2\0\3\102\3\0\1\102"+
    "\7\0\4\36\1\0\1\36\7\0\14\102\3\36\1\102"+
    "\13\0\3\102\1\0\11\36\1\0\3\36\1\0\26\36"+
    "\1\0\7\36\1\0\2\36\1\0\5\36\2\0\1\102"+
    "\1\36\10\102\1\0\3\102\1\0\3\102\2\0\1\36"+
    "\17\0\2\36\2\102\2\0\12\102\11\0\1\36\6\102"+
    "\1\0\3\102\1\0\10\36\2\0\2\36\2\0\26\36"+
    "\1\0\7\36\1\0\2\36\1\0\5\36\2\0\1\102"+
    "\1\36\7\102\2\0\2\102\2\0\3\102\10\0\2\102"+
    "\4\0\2\36\1\0\3\36\2\102\2\0\12\102\1\0"+
    "\1\36\20\0\1\102\1\36\1\0\6\36\3\0\3\36"+
    "\1\0\4\36\3\0\2\36\1\0\1\36\1\0\2\36"+
    "\3\0\2\36\3\0\3\36\3\0\14\36\4\0\5\102"+
    "\3\0\3\102\1\0\4\102\2\0\1\36\6\0\1\102"+
    "\16\0\12\102\20\0\5\102\10\36\1\0\3\36\1\0"+
    "\27\36\1\0\20\36\3\0\1\36\7\102\1\0\3\102"+
    "\1\0\4\102\7\0\2\102\1\0\3\36\5\0\2\36"+
    "\2\102\2\0\12\102\20\0\1\36\3\102\1\0\10\36"+
    "\1\0\3\36\1\0\27\36\1\0\12\36\1\0\5\36"+
    "\2\0\1\102\1\36\7\102\1\0\3\102\1\0\4\102"+
    "\7\0\2\102\7\0\1\36\1\0\2\36\2\102\2\0"+
    "\12\102\1\0\2\36\15\0\4\102\1\0\10\36\1\0"+
    "\3\36\1\0\51\36\2\102\1\36\7\102\1\0\3\102"+
    "\1\0\4\102\1\36\5\0\3\36\1\102\7\0\3\36"+
    "\2\102\2\0\12\102\12\0\6\36\2\0\2\102\1\0"+
    "\22\36\3\0\30\36\1\0\11\36\1\0\1\36\2\0"+
    "\7\36\3\0\1\102\4\0\6\102\1\0\1\102\1\0"+
    "\10\102\6\0\12\102\2\0\2\102\15\0\60\36\1\102"+
    "\1\36\10\102\5\0\7\36\10\102\1\0\12\102\47\0"+
    "\2\36\1\0\1\36\1\0\5\36\1\0\30\36\1\0"+
    "\1\36\1\0\12\36\1\102\1\36\12\102\1\36\2\0"+
    "\5\36\1\0\1\36\1\0\6\102\2\0\12\102\2\0"+
    "\4\36\40\0\1\36\27\0\2\102\6\0\12\102\13\0"+
    "\1\102\1\0\1\102\1\0\1\102\4\0\2\102\10\36"+
    "\1\0\44\36\4\0\24\102\1\0\2\102\5\36\13\102"+
    "\1\0\44\102\11\0\1\102\71\0\53\36\24\102\1\36"+
    "\12\102\6\0\6\36\4\102\4\36\3\102\1\36\3\102"+
    "\2\36\7\102\3\36\4\102\15\36\14\102\1\36\17\102"+
    "\2\0\46\36\1\0\1\36\5\0\1\36\2\0\53\36"+
    "\1\0\115\36\1\0\4\36\2\0\7\36\1\0\1\36"+
    "\1\0\4\36\2\0\51\36\1\0\4\36\2\0\41\36"+
    "\1\0\4\36\2\0\7\36\1\0\1\36\1\0\4\36"+
    "\2\0\17\36\1\0\71\36\1\0\4\36\2\0\103\36"+
    "\2\0\3\102\11\0\11\102\16\0\20\36\20\0\126\36"+
    "\2\0\6\36\3\0\u016c\36\2\0\21\36\1\0\32\36"+
    "\5\0\113\36\3\0\13\36\7\0\15\36\1\0\4\36"+
    "\3\102\13\0\22\36\3\102\13\0\22\36\2\102\14\0"+
    "\15\36\1\0\3\36\1\0\2\102\14\0\64\36\40\102"+
    "\3\0\1\36\4\0\1\36\1\102\2\0\12\102\41\0"+
    "\3\102\2\0\12\102\6\0\131\36\7\0\51\36\1\102"+
    "\1\36\5\0\106\36\12\0\37\36\1\0\14\102\4\0"+
    "\14\102\12\0\12\102\36\36\2\0\5\36\13\0\54\36"+
    "\4\0\32\36\6\0\13\102\45\0\27\36\5\102\4\0"+
    "\65\36\12\102\1\0\35\102\2\0\13\102\6\0\12\102"+
    "\15\0\1\36\10\0\16\102\102\0\5\102\57\36\21\102"+
    "\7\36\4\0\12\102\21\0\11\102\14\0\3\102\36\36"+
    "\15\102\2\36\12\102\54\36\16\102\14\0\44\36\24\102"+
    "\10\0\12\102\3\0\3\36\12\102\44\36\2\0\11\36"+
    "\7\0\53\36\2\0\3\36\20\0\3\102\1\0\25\102"+
    "\4\36\1\102\6\36\1\102\2\36\3\102\1\36\5\0"+
    "\300\36\72\102\1\0\5\102\26\36\2\0\6\36\2\0"+
    "\46\36\2\0\6\36\2\0\10\36\1\0\1\36\1\0"+
    "\1\36\1\0\1\36\1\0\37\36\2\0\65\36\1\0"+
    "\7\36\1\0\1\36\3\0\3\36\1\0\7\36\3\0"+
    "\4\36\2\0\6\36\4\0\15\36\5\0\3\36\1\0"+
    "\7\36\53\0\2\3\25\0\2\102\23\0\1\102\34\0"+
    "\1\36\15\0\1\36\20\0\15\36\63\0\15\102\4\0"+
    "\1\102\3\0\14\102\21\0\1\36\4\0\1\36\2\0"+
    "\12\36\1\0\1\36\2\0\6\36\6\0\1\36\1\0"+
    "\1\36\1\0\1\36\1\0\20\36\2\0\4\36\5\0"+
    "\5\36\4\0\1\36\21\0\51\36\u0177\0\57\36\1\0"+
    "\57\36\1\0\205\36\6\0\4\36\3\102\2\36\14\0"+
    "\46\36\1\0\1\36\5\0\1\36\2\0\70\36\7\0"+
    "\1\36\17\0\1\102\27\36\11\0\7\36\1\0\7\36"+
    "\1\0\7\36\1\0\7\36\1\0\7\36\1\0\7\36"+
    "\1\0\7\36\1\0\7\36\1\0\40\102\5\0\3\36"+
    "\31\0\11\36\6\102\1\0\5\36\2\0\5\36\4\0"+
    "\126\36\2\0\2\102\2\0\3\36\1\0\132\36\1\0"+
    "\4\36\5\0\53\36\1\0\136\36\21\0\33\36\65\0"+
    "\306\36\112\0\360\36\20\0\215\36\103\0\56\36\2\0"+
    "\15\36\3\0\20\36\12\102\2\36\24\0\57\36\1\102"+
    "\4\0\12\102\1\0\37\36\2\102\120\36\2\102\45\0"+
    "\11\36\2\0\147\36\2\0\65\36\2\0\5\36\60\0"+
    "\13\36\1\102\3\36\1\102\4\36\1\102\27\36\5\102"+
    "\30\0\64\36\14\0\2\102\62\36\22\102\12\0\12\102"+
    "\6\0\22\102\6\36\3\0\1\36\1\0\2\36\13\102"+
    "\34\36\10\102\2\0\27\36\15\102\14\0\35\36\3\0"+
    "\4\102\57\36\16\102\16\0\1\36\12\102\6\0\5\36"+
    "\1\102\12\36\12\102\5\36\1\0\51\36\16\102\11\0"+
    "\3\36\1\102\10\36\2\102\2\0\12\102\6\0\27\36"+
    "\3\0\1\36\3\102\62\36\1\102\1\36\3\102\2\36"+
    "\2\102\5\36\2\102\1\36\1\102\1\36\30\0\3\36"+
    "\2\0\13\36\5\102\2\0\3\36\2\102\12\0\6\36"+
    "\2\0\6\36\2\0\6\36\11\0\7\36\1\0\7\36"+
    "\1\0\53\36\1\0\14\36\10\0\163\36\10\102\1\0"+
    "\2\102\2\0\12\102\6\0\244\36\14\0\27\36\4\0"+
    "\61\36\4\0\u0100\3\156\36\2\0\152\36\46\0\7\36"+
    "\14\0\5\36\5\0\1\36\1\102\12\36\1\0\15\36"+
    "\1\0\5\36\1\0\1\36\1\0\2\36\1\0\2\36"+
    "\1\0\154\36\41\0\213\36\6\0\332\36\22\0\100\36"+
    "\2\0\66\36\50\0\12\36\6\0\20\102\20\0\20\102"+
    "\3\0\2\102\30\0\3\102\41\0\1\36\1\0\1\36"+
    "\3\0\1\36\1\0\1\36\1\0\1\36\1\0\1\36"+
    "\1\0\176\36\23\0\12\102\7\0\32\36\4\0\1\102"+
    "\1\0\32\36\13\0\70\36\2\102\37\36\3\0\6\36"+
    "\2\0\6\36\2\0\6\36\2\0\3\36\43\0\14\36"+
    "\1\0\32\36\1\0\23\36\1\0\2\36\1\0\17\36"+
    "\2\0\16\36\42\0\173\36\105\0\65\36\210\0\1\102"+
    "\202\0\35\36\3\0\61\36\17\0\1\102\37\0\40\36"+
    "\15\0\36\36\5\0\46\36\5\102\5\0\36\36\2\0"+
    "\44\36\4\0\10\36\1\0\5\36\52\0\236\36\2\0"+
    "\12\102\6\0\44\36\4\0\44\36\4\0\50\36\10\0"+
    "\64\36\234\0\67\36\11\0\26\36\12\0\10\36\230\0"+
    "\6\36\2\0\1\36\1\0\54\36\1\0\2\36\3\0"+
    "\1\36\2\0\27\36\12\0\27\36\11\0\37\36\101\0"+
    "\23\36\1\0\2\36\12\0\26\36\12\0\32\36\106\0"+
    "\70\36\6\0\2\36\100\0\1\36\3\102\1\0\2\102"+
    "\5\0\4\102\4\36\1\0\3\36\1\0\35\36\2\0"+
    "\3\102\4\0\1\102\40\0\35\36\3\0\35\36\43\0"+
    "\10\36\1\0\34\36\2\102\31\0\66\36\12\0\26\36"+
    "\12\0\23\36\15\0\22\36\156\0\111\36\67\0\63\36"+
    "\15\0\63\36\15\0\44\36\4\102\10\0\12\102\306\0"+
    "\35\36\12\0\1\36\10\0\26\36\13\102\217\0\27\36"+
    "\11\0\3\102\65\36\17\102\37\0\12\102\17\0\4\102"+
    "\55\36\13\102\25\0\31\36\7\0\12\102\6\0\3\102"+
    "\44\36\16\102\1\0\12\102\4\0\1\36\2\102\11\0"+
    "\43\36\1\102\2\0\1\36\11\0\3\102\60\36\16\102"+
    "\4\36\4\0\4\102\3\0\12\102\1\36\1\0\1\36"+
    "\43\0\22\36\1\0\31\36\14\102\6\0\1\102\101\0"+
    "\7\36\1\0\1\36\1\0\4\36\1\0\17\36\1\0"+
    "\12\36\7\0\57\36\14\102\5\0\12\102\6\0\4\102"+
    "\1\0\10\36\2\0\2\36\2\0\26\36\1\0\7\36"+
    "\1\0\2\36\1\0\5\36\1\0\2\102\1\36\7\102"+
    "\2\0\2\102\2\0\3\102\2\0\1\36\6\0\1\102"+
    "\5\0\5\36\2\102\2\0\7\102\3\0\5\102\213\0"+
    "\65\36\22\102\4\36\5\0\12\102\4\0\1\102\1\36"+
    "\40\0\60\36\24\102\2\36\1\0\1\36\10\0\12\102"+
    "\246\0\57\36\7\102\2\0\11\102\27\0\4\36\2\102"+
    "\42\0\60\36\21\102\3\0\1\36\13\0\12\102\46\0"+
    "\53\36\15\102\1\36\7\0\12\102\66\0\33\36\2\0"+
    "\17\102\4\0\12\102\306\0\54\36\17\102\145\0\100\36"+
    "\12\102\25\0\1\36\240\0\10\36\2\0\47\36\7\102"+
    "\2\0\7\102\1\36\1\0\1\36\1\102\33\0\1\36"+
    "\12\102\50\36\7\102\1\36\4\102\10\0\1\102\10\0"+
    "\1\36\13\102\56\36\20\102\3\0\1\36\42\0\71\36"+
    "\7\0\11\36\1\0\45\36\10\102\1\0\10\102\1\36"+
    "\17\0\12\102\30\0\36\36\2\0\26\102\1\0\16\102"+
    "\111\0\7\36\1\0\2\36\1\0\46\36\6\102\3\0"+
    "\1\102\1\0\2\102\1\0\7\102\1\36\1\102\10\0"+
    "\12\102\6\0\6\36\1\0\2\36\1\0\40\36\5\102"+
    "\1\0\2\102\1\0\5\102\1\36\7\0\12\102\u0136\0"+
    "\23\36\4\102\11\0\232\36\146\0\157\36\21\0\304\36"+
    "\274\0\57\36\321\0\107\36\271\0\71\36\7\0\37\36"+
    "\1\0\12\102\146\0\36\36\2\0\5\102\13\0\60\36"+
    "\7\102\11\0\4\36\14\0\12\102\11\0\25\36\5\0"+
    "\23\36\260\0\100\36\200\0\113\36\4\0\1\102\1\36"+
    "\67\102\7\0\4\102\15\36\100\0\2\36\1\0\1\36"+
    "\34\0\370\36\10\0\363\36\15\0\37\36\61\0\3\36"+
    "\21\0\4\36\10\0\u018c\36\4\0\153\36\5\0\15\36"+
    "\3\0\11\36\7\0\12\36\3\0\2\102\306\0\5\102"+
    "\3\0\6\102\10\0\10\102\2\0\7\102\36\0\4\102"+
    "\224\0\3\102\273\0\125\36\1\0\107\36\1\0\2\36"+
    "\2\0\1\36\2\0\2\36\2\0\4\36\1\0\14\36"+
    "\1\0\1\36\1\0\7\36\1\0\101\36\1\0\4\36"+
    "\2\0\10\36\1\0\7\36\1\0\34\36\1\0\4\36"+
    "\1\0\5\36\1\0\1\36\3\0\7\36\1\0\u0154\36"+
    "\2\0\31\36\1\0\31\36\1\0\37\36\1\0\31\36"+
    "\1\0\37\36\1\0\31\36\1\0\37\36\1\0\31\36"+
    "\1\0\37\36\1\0\31\36\1\0\10\36\2\0\151\102"+
    "\4\0\62\102\10\0\1\102\16\0\1\102\26\0\5\102"+
    "\1\0\17\102\120\0\7\102\1\0\21\102\2\0\7\102"+
    "\1\0\2\102\1\0\5\102\325\0\55\36\3\0\7\102"+
    "\7\36\2\0\12\102\4\0\1\36\u0171\0\54\36\16\102"+
    "\6\0\305\36\13\0\7\102\51\0\104\36\7\102\1\36"+
    "\4\0\12\102\246\0\4\36\1\0\33\36\1\0\2\36"+
    "\1\0\1\36\2\0\1\36\1\0\12\36\1\0\4\36"+
    "\1\0\1\36\1\0\1\36\6\0\1\36\4\0\1\36"+
    "\1\0\1\36\1\0\1\36\1\0\3\36\1\0\2\36"+
    "\1\0\1\36\2\0\1\36\1\0\1\36\1\0\1\36"+
    "\1\0\1\36\1\0\1\36\1\0\2\36\1\0\1\36"+
    "\2\0\4\36\1\0\7\36\1\0\4\36\1\0\4\36"+
    "\1\0\1\36\1\0\12\36\1\0\21\36\5\0\3\36"+
    "\1\0\5\36\1\0\21\36\104\0\327\36\51\0\65\36"+
    "\13\0\336\36\2\0\u0182\36\16\0\u0131\36\37\0\36\36"+
    "\342\0\360\102\20\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\6\1\4"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\4\26"+
    "\1\27\1\30\1\31\14\26\1\32\1\33\1\34\1\35"+
    "\3\36\3\37\1\0\1\40\2\4\1\41\1\42\1\43"+
    "\1\4\1\44\1\45\1\46\1\47\2\0\1\50\1\51"+
    "\1\52\1\0\1\53\1\54\1\55\1\0\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\3\26\1\66"+
    "\1\67\20\26\1\70\11\26\1\71\1\72\1\73\1\74"+
    "\3\0\1\4\1\75\1\54\1\76\2\0\1\77\1\100"+
    "\11\26\1\101\3\26\1\102\1\103\2\26\1\104\1\26"+
    "\2\105\4\26\1\106\2\26\1\107\1\0\2\76\1\26"+
    "\1\110\3\26\1\111\5\26\1\112\1\113\10\26\1\114"+
    "\1\115\1\36\1\116\1\26\1\117\1\120\1\26\1\121"+
    "\2\26\1\122\1\26\1\102\2\26\1\123\4\26\1\36"+
    "\1\124\1\125\5\26\1\126\1\127\1\106\1\130\1\111"+
    "\4\26\1\131\1\26\1\132\1\26\1\133\1\134";

  private static int [] zzUnpackAction() {
    int [] result = new int[228];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\311\0\311\0\u02e1\0\u0324\0\311"+
    "\0\u0367\0\u03aa\0\u03ed\0\u0430\0\u0473\0\311\0\u04b6\0\u04f9"+
    "\0\u053c\0\311\0\u057f\0\u05c2\0\u0605\0\u0648\0\u068b\0\311"+
    "\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da\0\u081d\0\u0860\0\u08a3"+
    "\0\u08e6\0\u0929\0\u096c\0\u09af\0\u09f2\0\311\0\u0a35\0\311"+
    "\0\311\0\311\0\u0a78\0\u0abb\0\311\0\u0afe\0\u0b41\0\u0b84"+
    "\0\311\0\u0bc7\0\u0c0a\0\311\0\311\0\311\0\u0c4d\0\311"+
    "\0\311\0\311\0\311\0\u0c90\0\u0cd3\0\311\0\311\0\u0d16"+
    "\0\u0d59\0\311\0\u0d9c\0\311\0\u0ddf\0\311\0\311\0\u0e22"+
    "\0\311\0\311\0\311\0\311\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e"+
    "\0\311\0\311\0\u0f71\0\u0fb4\0\u0ff7\0\u103a\0\u107d\0\u10c0"+
    "\0\u1103\0\u1146\0\u1189\0\u11cc\0\u120f\0\u1252\0\u1295\0\u12d8"+
    "\0\u131b\0\u135e\0\u05c2\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u14ad"+
    "\0\u14f0\0\u1533\0\u1576\0\u15b9\0\311\0\311\0\311\0\311"+
    "\0\u0afe\0\u15fc\0\u163f\0\u1682\0\311\0\u16c5\0\u1708\0\u174b"+
    "\0\u178e\0\311\0\311\0\u17d1\0\u1814\0\u1857\0\u189a\0\u18dd"+
    "\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5"+
    "\0\u05c2\0\u05c2\0\u1b38\0\u1b7b\0\u05c2\0\u1bbe\0\u05c2\0\u1c01"+
    "\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6\0\u05c2"+
    "\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u05c2\0\u1f25\0\u1f68\0\u1fab"+
    "\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u05c2\0\u05c2"+
    "\0\u2180\0\u21c3\0\u2206\0\u2249\0\u228c\0\u22cf\0\u2312\0\u2355"+
    "\0\u05c2\0\u05c2\0\u2398\0\u05c2\0\u23db\0\u05c2\0\u05c2\0\u241e"+
    "\0\u05c2\0\u2461\0\u24a4\0\u05c2\0\u24e7\0\u252a\0\u256d\0\u25b0"+
    "\0\u05c2\0\u25f3\0\u2636\0\u2679\0\u26bc\0\u26ff\0\311\0\u05c2"+
    "\0\u2742\0\u2785\0\u27c8\0\u280b\0\u284e\0\u05c2\0\u05c2\0\u05c2"+
    "\0\u05c2\0\u05c2\0\u2891\0\u28d4\0\u2917\0\u295a\0\u05c2\0\u299d"+
    "\0\u05c2\0\u29e0\0\u05c2\0\u05c2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[228];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\4\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\5\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\3\34\1\35\1\36\1\34\1\37\1\4"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\34\1\50\4\34\1\51\1\36\1\34\1\52\1\53"+
    "\1\54\1\34\1\55\2\34\1\56\1\57\1\60\1\61"+
    "\1\4\14\62\1\63\4\62\1\64\61\62\2\65\1\66"+
    "\1\65\1\67\76\65\104\0\1\5\1\6\1\0\1\6"+
    "\14\0\1\70\62\0\2\6\1\0\1\6\130\0\1\71"+
    "\50\0\6\10\1\72\36\10\1\73\35\10\32\0\1\74"+
    "\60\0\1\75\21\0\1\76\50\0\11\13\1\72\33\13"+
    "\1\77\35\13\32\0\1\100\65\0\1\101\14\0\1\102"+
    "\67\0\1\103\1\104\1\0\5\105\3\0\1\106\1\107"+
    "\67\0\1\110\1\0\5\111\70\0\1\112\4\0\1\113"+
    "\10\0\1\114\70\0\1\104\1\0\5\24\10\0\1\115"+
    "\14\0\1\115\1\116\54\0\1\117\104\0\1\120\1\121"+
    "\102\0\1\122\1\123\101\0\1\124\1\125\71\0\5\34"+
    "\6\0\7\34\4\0\17\34\1\126\6\34\4\0\1\34"+
    "\22\0\5\34\6\0\7\34\4\0\26\34\4\0\1\34"+
    "\22\0\5\34\6\0\6\34\1\127\4\0\26\34\4\0"+
    "\1\34\22\0\5\34\6\0\7\34\4\0\1\34\1\130"+
    "\24\34\4\0\1\34\46\0\1\131\66\0\1\132\72\0"+
    "\5\34\6\0\7\34\4\0\17\34\1\126\1\133\3\34"+
    "\1\134\1\34\4\0\1\34\22\0\5\34\6\0\7\34"+
    "\4\0\15\34\1\135\1\34\1\136\6\34\4\0\1\34"+
    "\22\0\5\34\6\0\7\34\4\0\15\34\1\137\10\34"+
    "\4\0\1\34\22\0\5\34\6\0\7\34\4\0\4\34"+
    "\1\140\10\34\1\141\10\34\4\0\1\34\22\0\5\34"+
    "\6\0\7\34\4\0\12\34\1\142\1\34\1\143\11\34"+
    "\4\0\1\34\22\0\2\34\1\144\1\34\1\145\6\0"+
    "\7\34\4\0\1\146\11\34\1\147\2\34\1\150\4\34"+
    "\1\151\3\34\4\0\1\34\22\0\2\34\1\152\2\34"+
    "\6\0\7\34\4\0\5\34\1\153\6\34\1\154\11\34"+
    "\4\0\1\34\22\0\5\34\6\0\7\34\4\0\22\34"+
    "\1\155\3\34\4\0\1\34\22\0\5\34\6\0\7\34"+
    "\4\0\1\156\3\34\1\157\21\34\4\0\1\34\22\0"+
    "\5\34\6\0\7\34\4\0\7\34\1\160\11\34\1\161"+
    "\4\34\4\0\1\34\22\0\5\34\6\0\7\34\4\0"+
    "\17\34\1\162\5\34\1\163\4\0\1\34\22\0\5\34"+
    "\6\0\7\34\4\0\1\164\25\34\4\0\1\34\32\0"+
    "\1\165\44\0\1\166\24\0\1\167\75\0\1\170\67\0"+
    "\1\171\17\0\1\172\62\0\2\171\16\0\1\172\102\0"+
    "\1\173\116\0\7\174\4\0\26\174\5\0\103\10\103\13"+
    "\22\0\5\111\74\0\1\104\1\0\5\105\10\0\1\115"+
    "\14\0\1\115\1\116\45\0\1\175\104\0\5\111\10\0"+
    "\1\115\14\0\1\115\26\0\2\176\3\0\14\176\1\177"+
    "\61\176\15\0\1\200\1\0\1\200\2\0\5\201\106\0"+
    "\1\202\102\0\1\203\72\0\5\34\6\0\7\34\4\0"+
    "\17\34\1\204\6\34\4\0\1\34\22\0\5\34\6\0"+
    "\3\34\1\205\3\34\4\0\26\34\4\0\1\34\22\0"+
    "\5\34\6\0\7\34\4\0\10\34\1\206\15\34\4\0"+
    "\1\34\22\0\5\34\6\0\7\34\4\0\25\34\1\207"+
    "\4\0\1\34\22\0\5\34\6\0\7\34\4\0\1\210"+
    "\25\34\4\0\1\34\22\0\5\34\6\0\7\34\4\0"+
    "\15\34\1\211\10\34\4\0\1\34\22\0\5\34\6\0"+
    "\7\34\4\0\4\34\1\212\21\34\4\0\1\34\22\0"+
    "\5\34\6\0\7\34\4\0\14\34\1\213\2\34\1\214"+
    "\6\34\4\0\1\34\22\0\5\34\6\0\7\34\4\0"+
    "\5\34\1\215\20\34\4\0\1\34\22\0\5\34\6\0"+
    "\7\34\4\0\22\34\1\216\3\34\4\0\1\34\22\0"+
    "\5\34\6\0\7\34\4\0\20\34\1\217\5\34\4\0"+
    "\1\34\22\0\5\34\6\0\7\34\4\0\22\34\1\220"+
    "\3\34\4\0\1\34\22\0\1\34\1\221\3\34\6\0"+
    "\7\34\4\0\26\34\4\0\1\34\22\0\3\34\1\222"+
    "\1\34\6\0\7\34\4\0\26\34\4\0\1\34\22\0"+
    "\5\34\6\0\7\34\4\0\12\34\1\223\13\34\4\0"+
    "\1\34\22\0\5\34\6\0\7\34\4\0\15\34\1\224"+
    "\10\34\4\0\1\34\22\0\5\34\6\0\7\34\4\0"+
    "\17\34\1\225\6\34\4\0\1\34\22\0\5\34\6\0"+
    "\7\34\4\0\14\34\1\226\11\34\4\0\1\34\22\0"+
    "\1\34\1\227\3\34\6\0\7\34\4\0\26\34\4\0"+
    "\1\34\22\0\5\34\6\0\7\34\4\0\21\34\1\230"+
    "\4\34\4\0\1\34\22\0\5\34\6\0\7\34\4\0"+
    "\12\34\1\231\13\34\4\0\1\34\22\0\5\34\6\0"+
    "\7\34\4\0\14\34\1\232\11\34\4\0\1\34\22\0"+
    "\5\34\6\0\7\34\4\0\21\34\1\233\4\34\4\0"+
    "\1\34\22\0\5\34\6\0\7\34\4\0\6\34\1\234"+
    "\17\34\4\0\1\34\22\0\5\34\6\0\7\34\4\0"+
    "\17\34\1\235\6\34\4\0\1\34\22\0\5\34\6\0"+
    "\7\34\4\0\22\34\1\236\3\34\4\0\1\34\22\0"+
    "\5\34\6\0\7\34\4\0\16\34\1\237\7\34\4\0"+
    "\1\34\22\0\5\34\6\0\7\34\4\0\17\34\1\240"+
    "\6\34\4\0\1\34\21\0\1\241\102\0\1\242\103\0"+
    "\5\174\6\0\7\174\4\0\26\174\4\0\1\174\2\176"+
    "\3\0\76\176\2\243\3\0\14\243\1\176\61\243\22\0"+
    "\5\201\76\0\5\201\26\0\1\116\47\0\5\34\6\0"+
    "\7\34\4\0\1\244\25\34\4\0\1\34\22\0\5\34"+
    "\6\0\3\34\1\245\3\34\4\0\26\34\4\0\1\34"+
    "\22\0\5\34\6\0\7\34\4\0\4\34\1\246\21\34"+
    "\4\0\1\34\22\0\5\34\6\0\7\34\4\0\14\34"+
    "\1\247\11\34\4\0\1\34\22\0\5\34\6\0\7\34"+
    "\4\0\7\34\1\250\16\34\4\0\1\34\22\0\5\34"+
    "\6\0\7\34\4\0\12\34\1\251\13\34\4\0\1\34"+
    "\22\0\5\34\6\0\7\34\4\0\1\252\25\34\4\0"+
    "\1\34\22\0\5\34\6\0\7\34\4\0\21\34\1\253"+
    "\4\34\4\0\1\34\22\0\5\34\6\0\7\34\4\0"+
    "\15\34\1\254\10\34\4\0\1\34\22\0\5\34\6\0"+
    "\7\34\4\0\4\34\1\255\21\34\4\0\1\34\22\0"+
    "\5\34\6\0\7\34\4\0\1\34\1\256\24\34\4\0"+
    "\1\34\22\0\5\34\6\0\7\34\4\0\4\34\1\257"+
    "\21\34\4\0\1\34\22\0\5\34\6\0\7\34\4\0"+
    "\13\34\1\260\12\34\4\0\1\34\22\0\5\34\6\0"+
    "\7\34\4\0\20\34\1\236\5\34\4\0\1\34\22\0"+
    "\5\34\6\0\7\34\4\0\1\261\25\34\4\0\1\34"+
    "\22\0\5\34\6\0\7\34\4\0\2\34\1\262\23\34"+
    "\4\0\1\34\22\0\2\34\1\152\2\34\6\0\7\34"+
    "\4\0\4\34\1\263\21\34\4\0\1\34\22\0\5\34"+
    "\6\0\7\34\4\0\12\34\1\245\13\34\4\0\1\34"+
    "\22\0\5\34\6\0\7\34\4\0\6\34\1\264\17\34"+
    "\4\0\1\34\22\0\5\34\6\0\7\34\4\0\22\34"+
    "\1\265\3\34\4\0\1\34\22\0\5\34\6\0\7\34"+
    "\4\0\14\34\1\266\11\34\4\0\1\34\22\0\5\34"+
    "\6\0\7\34\4\0\7\34\1\267\12\34\1\270\3\34"+
    "\4\0\1\34\22\0\5\34\6\0\7\34\4\0\4\34"+
    "\1\271\21\34\4\0\1\34\22\0\5\34\6\0\7\34"+
    "\4\0\4\34\1\272\21\34\4\0\1\34\21\0\1\273"+
    "\61\0\2\243\3\0\14\243\1\0\63\243\3\0\76\243"+
    "\22\0\5\34\6\0\7\34\4\0\25\34\1\274\4\0"+
    "\1\34\22\0\5\34\6\0\7\34\4\0\2\34\1\275"+
    "\23\34\4\0\1\34\22\0\5\34\6\0\7\34\4\0"+
    "\2\34\1\276\23\34\4\0\1\34\22\0\5\34\6\0"+
    "\7\34\4\0\21\34\1\277\4\34\4\0\1\34\22\0"+
    "\5\34\6\0\7\34\4\0\4\34\1\300\21\34\4\0"+
    "\1\34\22\0\5\34\6\0\7\34\4\0\11\34\1\301"+
    "\14\34\4\0\1\34\22\0\5\34\6\0\7\34\4\0"+
    "\7\34\1\302\16\34\4\0\1\34\22\0\5\34\6\0"+
    "\7\34\4\0\22\34\1\303\3\34\4\0\1\34\22\0"+
    "\5\34\6\0\7\34\4\0\17\34\1\304\6\34\4\0"+
    "\1\34\22\0\5\34\6\0\7\34\4\0\12\34\1\305"+
    "\13\34\4\0\1\34\22\0\5\34\6\0\7\34\4\0"+
    "\21\34\1\306\4\34\4\0\1\34\22\0\5\34\6\0"+
    "\7\34\4\0\21\34\1\307\4\34\4\0\1\34\22\0"+
    "\5\34\6\0\7\34\4\0\17\34\1\310\6\34\4\0"+
    "\1\34\22\0\5\34\6\0\7\34\4\0\4\34\1\311"+
    "\21\34\4\0\1\34\22\0\5\34\6\0\7\34\4\0"+
    "\17\34\1\312\6\34\4\0\1\34\22\0\5\34\6\0"+
    "\7\34\4\0\1\313\25\34\4\0\1\34\22\0\5\34"+
    "\6\0\7\34\4\0\14\34\1\314\11\34\4\0\1\34"+
    "\22\0\5\34\6\0\7\34\4\0\2\34\1\315\23\34"+
    "\4\0\1\34\2\316\3\0\14\316\1\317\61\316\22\0"+
    "\5\34\6\0\7\34\4\0\21\34\1\320\4\34\4\0"+
    "\1\34\22\0\5\34\6\0\7\34\4\0\1\321\25\34"+
    "\4\0\1\34\22\0\5\34\6\0\7\34\4\0\14\34"+
    "\1\322\11\34\4\0\1\34\22\0\5\34\6\0\7\34"+
    "\4\0\21\34\1\323\4\34\4\0\1\34\22\0\5\34"+
    "\6\0\7\34\4\0\4\34\1\222\21\34\4\0\1\34"+
    "\22\0\2\34\1\144\1\34\1\145\6\0\7\34\4\0"+
    "\26\34\4\0\1\34\22\0\5\34\6\0\7\34\4\0"+
    "\7\34\1\324\16\34\4\0\1\34\22\0\5\34\6\0"+
    "\7\34\4\0\5\34\1\325\20\34\4\0\1\34\22\0"+
    "\5\34\6\0\7\34\4\0\14\34\1\326\11\34\4\0"+
    "\1\34\22\0\5\34\6\0\7\34\4\0\12\34\1\327"+
    "\13\34\4\0\1\34\22\0\5\34\6\0\7\34\4\0"+
    "\6\34\1\330\17\34\4\0\1\34\22\0\5\34\6\0"+
    "\7\34\4\0\21\34\1\331\4\34\4\0\1\34\2\316"+
    "\3\0\76\316\22\0\5\34\6\0\7\34\4\0\14\34"+
    "\1\332\11\34\4\0\1\34\22\0\5\34\6\0\7\34"+
    "\4\0\22\34\1\333\3\34\4\0\1\34\22\0\5\34"+
    "\6\0\7\34\4\0\7\34\1\334\16\34\4\0\1\34"+
    "\22\0\5\34\6\0\7\34\4\0\15\34\1\335\10\34"+
    "\4\0\1\34\22\0\5\34\6\0\7\34\4\0\1\336"+
    "\25\34\4\0\1\34\22\0\5\34\6\0\7\34\4\0"+
    "\4\34\1\337\21\34\4\0\1\34\22\0\5\34\6\0"+
    "\7\34\4\0\14\34\1\340\11\34\4\0\1\34\22\0"+
    "\5\34\6\0\7\34\4\0\14\34\1\341\11\34\4\0"+
    "\1\34\22\0\5\34\6\0\7\34\4\0\2\34\1\342"+
    "\23\34\4\0\1\34\22\0\5\34\6\0\7\34\4\0"+
    "\4\34\1\343\21\34\4\0\1\34\22\0\5\34\6\0"+
    "\7\34\4\0\4\34\1\344\21\34\4\0\1\34";

  private static int [] zzUnpacktrans() {
    int [] result = new int[10787];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\7\1\2\11\2\1\1\11\5\1\1\11"+
    "\3\1\1\11\5\1\1\11\15\1\1\11\1\1\3\11"+
    "\2\1\1\11\2\1\1\0\1\11\2\1\3\11\1\1"+
    "\4\11\2\0\2\11\1\1\1\0\1\11\1\1\1\11"+
    "\1\0\2\11\1\1\4\11\4\1\2\11\32\1\4\11"+
    "\3\0\1\1\1\11\2\1\2\0\2\11\35\1\1\0"+
    "\55\1\1\11\25\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[228];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public VoltumLexer() {
    this((java.io.Reader)null);
  }
  // Dedicated storage for starting position of some previously successful match
  private int zzPostponedMarkedPos = -1;
  /**
    * Dedicated nested-comment level counter
    */
  private int zzNestedCommentLevel = 0;
IElementType imbueBlockComment() {
  assert(zzNestedCommentLevel == 0);
  yybegin(YYINITIAL);

  zzStartRead = zzPostponedMarkedPos;
  zzPostponedMarkedPos = -1;

  return VoltumTokenTypes.BLOCK_COMMENT;
}
IElementType imbueOuterEolComment(){
  yybegin(YYINITIAL);

  zzStartRead = zzPostponedMarkedPos;
  zzPostponedMarkedPos = -1;

  return VoltumTokenTypes.EOL_COMMENT;
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public VoltumLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case IN_BLOCK_COMMENT: {
              zzNestedCommentLevel = 0; return imbueBlockComment();
            }  // fall though
            case 229: break;
            case IN_OUTER_EOL_COMMENT: {
              return imbueOuterEolComment();
            }  // fall though
            case 230: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 93: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 94: break;
          case 3:
            { return EXCL;
            }
          // fall through
          case 95: break;
          case 4:
            { return STRING_LITERAL;
            }
          // fall through
          case 96: break;
          case 5:
            { return REM;
            }
          // fall through
          case 97: break;
          case 6:
            { return AND;
            }
          // fall through
          case 98: break;
          case 7:
            { return LPAREN;
            }
          // fall through
          case 99: break;
          case 8:
            { return RPAREN;
            }
          // fall through
          case 100: break;
          case 9:
            { return MUL;
            }
          // fall through
          case 101: break;
          case 10:
            { return PLUS;
            }
          // fall through
          case 102: break;
          case 11:
            { return COMMA;
            }
          // fall through
          case 103: break;
          case 12:
            { return MINUS;
            }
          // fall through
          case 104: break;
          case 13:
            { return DOT;
            }
          // fall through
          case 105: break;
          case 14:
            { return DIV;
            }
          // fall through
          case 106: break;
          case 15:
            { return VALUE_INTEGER;
            }
          // fall through
          case 107: break;
          case 16:
            { return COLON;
            }
          // fall through
          case 108: break;
          case 17:
            { return SEMICOLON;
            }
          // fall through
          case 109: break;
          case 18:
            { return LT;
            }
          // fall through
          case 110: break;
          case 19:
            { return EQ;
            }
          // fall through
          case 111: break;
          case 20:
            { return GT;
            }
          // fall through
          case 112: break;
          case 21:
            { return QUESTION;
            }
          // fall through
          case 113: break;
          case 22:
            { return ID;
            }
          // fall through
          case 114: break;
          case 23:
            { return LBRACK;
            }
          // fall through
          case 115: break;
          case 24:
            { return RBRACK;
            }
          // fall through
          case 116: break;
          case 25:
            { return XOR;
            }
          // fall through
          case 117: break;
          case 26:
            { return LCURLY;
            }
          // fall through
          case 118: break;
          case 27:
            { return OR;
            }
          // fall through
          case 119: break;
          case 28:
            { return RCURLY;
            }
          // fall through
          case 120: break;
          case 29:
            { return TILDE;
            }
          // fall through
          case 121: break;
          case 30:
            { 
            }
          // fall through
          case 122: break;
          case 31:
            { yybegin(YYINITIAL); yypushback(1); return imbueOuterEolComment();
            }
          // fall through
          case 123: break;
          case 32:
            { return EXCLEQ;
            }
          // fall through
          case 124: break;
          case 33:
            { return REMEQ;
            }
          // fall through
          case 125: break;
          case 34:
            { return ANDAND;
            }
          // fall through
          case 126: break;
          case 35:
            { return ANDEQ;
            }
          // fall through
          case 127: break;
          case 36:
            { return MULEQ;
            }
          // fall through
          case 128: break;
          case 37:
            { return PLUSPLUS;
            }
          // fall through
          case 129: break;
          case 38:
            { return PLUSEQ;
            }
          // fall through
          case 130: break;
          case 39:
            { return MINUSMINUS;
            }
          // fall through
          case 131: break;
          case 40:
            { return MINUSEQ;
            }
          // fall through
          case 132: break;
          case 41:
            { return ARROW;
            }
          // fall through
          case 133: break;
          case 42:
            { return DOTDOT;
            }
          // fall through
          case 134: break;
          case 43:
            { yybegin(IN_BLOCK_COMMENT); yypushback(2);
            }
          // fall through
          case 135: break;
          case 44:
            { return VoltumTokenTypes.EOL_COMMENT;
            }
          // fall through
          case 136: break;
          case 45:
            { return DIVEQ;
            }
          // fall through
          case 137: break;
          case 46:
            { return VALUE_FLOAT;
            }
          // fall through
          case 138: break;
          case 47:
            { return COLONCOLON;
            }
          // fall through
          case 139: break;
          case 48:
            { return LTLT;
            }
          // fall through
          case 140: break;
          case 49:
            { return LTEQ;
            }
          // fall through
          case 141: break;
          case 50:
            { return EQEQ;
            }
          // fall through
          case 142: break;
          case 51:
            { return FAT_ARROW;
            }
          // fall through
          case 143: break;
          case 52:
            { return GTEQ;
            }
          // fall through
          case 144: break;
          case 53:
            { return GTGT;
            }
          // fall through
          case 145: break;
          case 54:
            { return BRACKET_PAIR;
            }
          // fall through
          case 146: break;
          case 55:
            { return XOREQ;
            }
          // fall through
          case 147: break;
          case 56:
            { return IF_KW;
            }
          // fall through
          case 148: break;
          case 57:
            { return OREQ;
            }
          // fall through
          case 149: break;
          case 58:
            { return OROR;
            }
          // fall through
          case 150: break;
          case 59:
            { if (--zzNestedCommentLevel == 0) return imbueBlockComment();
            }
          // fall through
          case 151: break;
          case 60:
            { if (zzNestedCommentLevel++ == 0) zzPostponedMarkedPos = zzStartRead;
            }
          // fall through
          case 152: break;
          case 61:
            { return DOTDOTDOT;
            }
          // fall through
          case 153: break;
          case 62:
            { yybegin(IN_OUTER_EOL_COMMENT); zzPostponedMarkedPos = zzStartRead;
            }
          // fall through
          case 154: break;
          case 63:
            { return LTLTEQ;
            }
          // fall through
          case 155: break;
          case 64:
            { return GTGTEQ;
            }
          // fall through
          case 156: break;
          case 65:
            { return DEF_KW;
            }
          // fall through
          case 157: break;
          case 66:
            { return FLOAT_KW;
            }
          // fall through
          case 158: break;
          case 67:
            { return DOUBLE_KW;
            }
          // fall through
          case 159: break;
          case 68:
            { return FOR_KW;
            }
          // fall through
          case 160: break;
          case 69:
            { return INT_KW;
            }
          // fall through
          case 161: break;
          case 70:
            { return STRING_KW;
            }
          // fall through
          case 162: break;
          case 71:
            { return VAR_KW;
            }
          // fall through
          case 163: break;
          case 72:
            { return VALUE_NULL;
            }
          // fall through
          case 164: break;
          case 73:
            { return BOOL_KW;
            }
          // fall through
          case 165: break;
          case 74:
            { return ELSE_KW;
            }
          // fall through
          case 166: break;
          case 75:
            { return ENUM_KW;
            }
          // fall through
          case 167: break;
          case 76:
            { return VALUE_BOOL;
            }
          // fall through
          case 168: break;
          case 77:
            { return TYPE_KW;
            }
          // fall through
          case 169: break;
          case 78:
            { return ARRAY_KW;
            }
          // fall through
          case 170: break;
          case 79:
            { return ASYNC_KW;
            }
          // fall through
          case 171: break;
          case 80:
            { return AWAIT_KW;
            }
          // fall through
          case 172: break;
          case 81:
            { return BREAK_KW;
            }
          // fall through
          case 173: break;
          case 82:
            { return DEFER_KW;
            }
          // fall through
          case 174: break;
          case 83:
            { return RANGE_KW;
            }
          // fall through
          case 175: break;
          case 84:
            { yybegin(YYINITIAL); yypushback(yylength()); return imbueOuterEolComment();
            }
          // fall through
          case 176: break;
          case 85:
            { return OBJECT_KW;
            }
          // fall through
          case 177: break;
          case 86:
            { return RETURN_KW;
            }
          // fall through
          case 178: break;
          case 87:
            { return SIGNAL_KW;
            }
          // fall through
          case 179: break;
          case 88:
            { return STRUCT_KW;
            }
          // fall through
          case 180: break;
          case 89:
            { return CONTINUE_KW;
            }
          // fall through
          case 181: break;
          case 90:
            { return FUNC_KW;
            }
          // fall through
          case 182: break;
          case 91:
            { return COROUTINE_KW;
            }
          // fall through
          case 183: break;
          case 92:
            { return INTERFACE_KW;
            }
          // fall through
          case 184: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
